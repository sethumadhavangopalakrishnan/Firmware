#include <WiFi.h>
#include <HTTPClient.h>
#include <SPIFFS.h>

// 🔧 Wi-Fi credentials
const char* ssid = "OnePlus Sethu";
const char* password = "252087200";

// 🌐 Public file URL and SPIFFS path
const char* fileURL = "http://www.textfiles.com/100/captmidn.txt";
const char* filePath = "/downloaded.txt";

bool downloaded = false;

void setup() {
  Serial.begin(115200);
  delay(2000);
  Serial.println("🔌 ESP32 booting...");

  // 📶 Connect to Wi-Fi with timeout
  WiFi.begin(ssid, password);
  Serial.print("🔄 Connecting to WiFi");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n❌ Failed to connect to WiFi");
    return;
  }

  Serial.println("\n✅ Connected to WiFi");
  Serial.print("📡 Local IP: ");
  Serial.println(WiFi.localIP());

  // 📁 Mount SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("❌ SPIFFS Mount Failed");
    while (true) delay(1000);
  }
  Serial.println("✅ SPIFFS Mounted Successfully");
}

void loop() {
  if (!downloaded) {
    downloadFileHTTP(fileURL, filePath);
    validateDownloadedFile(filePath);
    downloaded = true;
  }
}

void downloadFileHTTP(const char* url, const char* path) {
  HTTPClient http;
  http.setTimeout(10000);  // ⏱️ Set timeout to 10 seconds
  http.begin(url);

  int httpCode = http.GET();
  if (httpCode != HTTP_CODE_OK) {
    Serial.printf("❌ HTTP GET failed, error: %s\n", http.errorToString(httpCode).c_str());
    http.end();
    return;
  }

  File file = SPIFFS.open(path, FILE_WRITE);
  if (!file) {
    Serial.println("❌ Failed to open file for writing");
    http.end();
    return;
  }

  WiFiClient* stream = http.getStreamPtr();
  uint8_t buffer[1024];
  int written = 0;

  // 📥 Read stream and write to SPIFFS
  while (stream->available()) {
    int bytesRead = stream->readBytes(buffer, sizeof(buffer));
    if (bytesRead > 0) {
      file.write(buffer, bytesRead);
      written += bytesRead;
    }
    delay(1);  // Prevent watchdog reset
  }

  file.close();
  http.end();
  Serial.printf("✅ Downloaded %d bytes to %s\n", written, path);
}

void validateDownloadedFile(const char* path) {
  File file = SPIFFS.open(path, FILE_READ);
  if (!file) {
    Serial.println("❌ Failed to open file for reading");
    return;
  }

  Serial.println("📄 File contents:");
  while (file.available()) {
    Serial.write(file.read());
  }
  file.close();
}
